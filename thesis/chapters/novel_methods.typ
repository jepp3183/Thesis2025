#import "../lib.typ": *

= Novel methods <sec:novel_methods>

Generating counterfactuals aimed at $k$-means clusterings is a task for which very few methods exists. Currently, to the best of our knowledge, only @spagnolCounterfactualExplanationsClustering2024 and @vardakasCounterfactualExplanationsKmeans2025 presents solutions which are specifically designed for the clustering objective. 

Therefore, in this thesis, we contribute 4 novel methods which are designed to produce high quality counterfactuals specifically for the $k$-means clustering objective. As outlined in @sec:XAI, defining what makes a counterfactual high quality is challenging. We define 5 properties which we aim for our novel methods to achieve:

- *Validity.* Our methods should produce valid counterfactuals. In this case, valid means that they belong to the target cluster. Thus, regardless of the distribution of the data and cluster centers, the methods should be able to produce valid counterfactuals.
- *Similarity.* A key attribute of counterfactuals is that they are created due to some change made to the instance $x$ in order to move it to a target cluster. We want this change to be as small as possible, thereby minimizing the change between $x$ and $x'$. This also makes the counterfactual easier to act on for an end-user. We define this property directly based on the Euclidian distance between $x$ and $x'$.
- *Plausibility.* The plausibility of a counterfactual measures the degree to which a counterfactual is an inlier in the target cluster. Having a counterfactual resemble the data in the target cluster is a crucial property, since it should be a realistic counter-example to the instance $x$.
- *Sparsity.* For a counterfactual to be sparse, we require a low amount of features to be changed compared to the instance. Sparsity is valuable since concentrating on a few important features is easier than if the counterfactuals suggest changing every feature. This makes the counterfactual much easier to understand for end-users. Going back to the bank loan example from @sec:XAI, where a client is denied for a loan application, a sparse counterfactual is heavily preferred. A counterfactual telling you to completely re-organize your life is harder to act on than a counterfactual which only focuses on your income and debt situation. As sparsity increases, the counterfactual will inevitably end up more similar to the instance, which in turn can decrease plausibility. Therefore, while we aim to generate sparse counterfactuals, there will often be a trade-off with other metrics such as plausibility.
- *Runtime.* In order to produce effective counterfactuals, the running time of any method should be manageable. Therefore, we aim to create methods which can compete with state of the art algorithms when it comes to the running time.

In this thesis, we contribute with 4 novel methods. Gradient-Based Counterfactual Search (GradCF), presented in @sec:gradcf, is a method that uses gradient descent with a custom loss function to generate a single counterfactual. Counterfactual-Ascent (CFAE), presented in @cfae, employs a sampling technique combined with a new approach for limiting the amount of changed features to move towards the cluster boundary. Neighbor Counterfactual Search (NeCS), presented in @Necs, generates counterfactuals by replacing features in candidate counterfactuals with features from the $k$-nearest neighbors of $x$ in the target cluster. Tree-Guided Counterfactuals (TGCF), presented in @tree_methods, uses threshold trees to approximate clustering boundaries and thereby generate counterfactuals. Additionally, we present a way to manipulate threshold trees to better encapsulate the clusters.